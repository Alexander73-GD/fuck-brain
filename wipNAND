nand logic readable code (work in progress that I just want to save while it works)

INFORMATION
[
L/R+SG (Left/Right Single Guillemet): these symbols < and >. They're the most important commands in order to edit the gate connections.

SVR (Stored Values Row): the second row of the memory in a display of 12 cells per row. This is where the first two inputs and the results of each operation will be saved.

::::: indicates where the user can edit the code depending of the operation they want to do.

The NAND part consists of the 2nd, 3rd and 4th cell, which I call A, B and C. The inputs go to A and B, the output is saved at C after the operation.

Flag: special cell used for pointer control that makes things easier, specially when combined with the following concept.

+[-<+]- and ++[-->++]-- (or ++[--<++]--) are "gliders", a simple yet incredible idea I saw in mitxela's "AI in Brainfuck" video (https://www.youtube.com/watch?v=qK0vmuQib8Y).
The first one moves the pointer to the first cell (a -1), while the second moves it just before the SVR (a -2).


EDITING INSTRUCTIONS
POS: this means that you have to write as many '>' as the position of the number in the SVR you need.
INPUT RSG|LSG: this means that you have to write ONE '>'|'<' if you're going to the FIRST input (A) or TWO'>'|'<' if you're going to the SECOND input (B).


CODE STRUCTURE
Input Replacement (start and end at Flag2)
NAND Operation (starts anywhere and ends at C)

EXAMPLE
The code shown here makes a NOR gate, following the steps below
0 0       Initial values at input cells
1 0       Intermediate step (replace one of the two values)
1 1 : 3   Last replacement and FIRST operation
2 1       Intermediate step
2 2 : 4   Last replacement and SECOND operation
3 2       Intermediate step
3 4 : 5   Last replacement and THIRD operation
5 4       Intermediate step
5 5 : 6   Last replacement and FINAL operation

Note: not all logic gates need intermediate steps always, because sometimes only one replacement is required between operations.
]

->>>>>>>>>>>-->,>,<<

Input Replacement for 1 0
> POS :::::
[+[-<+]-
> INPUT RSG :::::
+ ++[-->++]-- <+>
> POS :::::
-] ++[--<++]-- <[ ++[-->++]--
> POS :::::
+ ++[--<++]-- < -]>

Input Replacement for 1 1
> POS :::::
[+[-<+]-
>> INPUT RSG :::::
+ ++[-->++]-- <+>
> POS :::::
-] ++[--<++]-- <[ ++[-->++]--
> POS :::::
+ ++[--<++]-- < -]>

NAND operation
+[-<+]-> >>+<<[>[>->]] +[-<+]-
